package com.xec.JavaEight.company;


import com.xec.string.StringXecUtills;

import java.util.*;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class MapVsFlatMap {
    public static void main(String[] args)
    {


        int a = 12333445;

        System.out.println( countUniqueDigit(a));
       // System.out.println( countPairsWithDiffK(a));
	/*Given a List of integers (List<Integer>),
            write code in Java 8 style to get the sum of the squares
        of all the odd numbers in the array.*/


        //int sum = IntStream.of(A).filter(e->e%2==1).map(a->a*a).sum();

        //System.out.println(sum);

        // making the array list object
     /*   ArrayList<String> fruit = new ArrayList<>();
        fruit.add("Apple");
        fruit.add("mango");
        fruit.add("pineapple");
        fruit.add("kiwi");
        System.out.println("List of fruit-" + fruit);

        List<List<Integer> > number = new ArrayList<>();

        // adding the elements to number arraylist
        number.add(Arrays.asList(1, 2));
        number.add(Arrays.asList(3, 4));
        number.add(Arrays.asList(5, 6));
        number.add(Arrays.asList(5, 6,6));
        number.add(Arrays.asList(7, 8));

        System.out.println("List of list-" + number);

        // lets use map() to convert list of fruit
        List list1 = fruit.stream()
                .map(s -> s.length())
                .collect(Collectors.toList());
        System.out.println("List generated by map-" + list1);

        // using flatmap() to flatten this list
        List<Integer> flatList
                = number.stream()
                .flatMap(list -> list.stream()).filter(a->a%2==0)
                .collect(Collectors.toList());

        // printing the list
        System.out.println("List generate by flatMap-"
                + flatList);

        Function<Integer,Integer> myFunction=a->a*10;
        BiFunction<Integer,Integer,String> myBiFunction= (a,b)->a*10/b+"1";

        System.out.println(myFunction.apply(10));
        System.out.println(myBiFunction.apply(10,2));*/
    }

    private static int countUniqueDigit(int num) {
        Set<Integer> digits = new HashSet<>();

/*
            // iterate to each digit
            while (num > 0) {
                // find last digit
                // add it to collection
                digits.add(num % 10);
                // remove last digit
                num /= 10;
            }

            // return size
            return digits.size();*/

        while(num>0){
            digits.add(num%10);
            num/=10;
        }
        return digits.size();

    }

    static int countPairsWithDiffK(int arr[],
                                   int n, int k)
    {
        int count = 0;
        //Input: arr[] = {1, 5, 3, 4, 2}, k = 3
        //
        // Pick all elements one by one
        for (int i = 0; i < n; i++)
        {
            // See if there is a pair
            // of this picked element
            for (int j = i + 1; j < n; j++)
               if(arr[i]-arr[j]==k||
                    arr[j]-arr[i]==k){
                   count++;

        }
        }
        return count;
    }
}